service: ${file(../../configuration.js):serviceNames.participantApi}

projectDir: '../..'

custom:
  config: ${file(../../configuration.js):stage.${self:provider.stage}}
  customDomain:
    domainName: ${self:custom.config.domain.api}
    hostedZoneId: ${self:custom.config.cloudformation.hostedZoneId}
    basePath: ''
    autoDomain: true
    autoDomainWaitFor: 60
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateArn: ${cf(${self:custom.config.certificateRegion}):${self:custom.config.stackName.certificate}.Certificate}

plugins:
  - serverless-iam-roles-per-function
  - serverless-domain-manager
  - serverless-plugin-include-dependencies
  - serverless-plugin-common-excludes
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: ${self:custom.config.lambda.memorySize}
  timeout: ${self:custom.config.lambda.timeout}
  region: ${self:custom.config.region}
  stage: ${opt:stage, 'development'}
  lambdaHashingVersion: 20201221
  iam:
    role: ${cf:${self:custom.config.stackName.infrastructure}.LambdaApiRoleArn}
  apiGateway:
    restApiId: ${cf:${self:custom.config.stackName.infrastructure}.ApiRestAPIId}
    restApiRootResourceId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayParticipantResourceId}
  logRetentionInDays: 14
  environment: ${self:custom.config.lambdaEnvironment}
  tracing:
    lambda: true

functions:
  # STAYS
  listStayAssignments:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stayAssignments.list
    events:
      - http:
          method: GET
          path: /stayAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  getStayAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stayAssignments.get
    events:
      - http:
          method: GET
          path: /stayAssignments/{stayAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # LABELS
  submitLabels:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/labels.post
    events:
      - http:
          method: POST
          path: /stayAssignments/{stayAssignmentId}/labels
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # RULESETS
  listRulesets:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/rulesets.list
    events:
      - http:
          method: GET
          path: /rulesets
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # RULESETSs
  getRuleset:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/rulesets.get
    events:
      - http:
          method: GET
          path: /rulesets/{rulesetId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # RULESETS
  createRuleset:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/rulesets.post
    events:
      - http:
          method: POST
          path: /rulesets
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # PINNED STAYS
  listPinnedStays:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/pinnedStays.list
    events:
      - http:
          method: GET
          path: /pinnedStays
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  updatePinnedStay:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/pinnedStays.put
    events:
      - http:
          method: PUT
          path: /pinnedStays/{stayId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
