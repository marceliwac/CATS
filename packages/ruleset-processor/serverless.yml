service: ${file(../../configuration.js):serviceNames.rulesetProcessor}
frameworkVersion: '2'

projectDir: '../..'

custom:
  pythonRequirements:
    dockerizePip: true
    useDownloadCache: false
    useStaticCache: false

  config: ${file(../../configuration.js):stage.${self:provider.stage}}

plugins:
  - serverless-iam-roles-per-function
  - serverless-python-requirements
  - serverless-offline

package:
  include:
    - '!./venv'
    - '!./node_modules'

provider:
  name: aws
  runtime: python3.8
  memorySize: ${self:custom.config.lambda.rulesetProcessor.memorySize}
  timeout: ${self:custom.config.lambda.rulesetProcessor.timeout}
  region: ${self:custom.config.region}
  stage: ${opt:stage, 'development'}
  lambdaHashingVersion: 20201221
  iam:
    role: ${cf:${self:custom.config.stackName.infrastructure}.LambdaRulesetProcessorRoleArn}
  logRetentionInDays: 14
  environment: ${self:custom.config.rulesetProcessorLambdaEnvironment}
  tracing:
    lambda: true

functions:
  processRuleset:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handler.handler
#
resources:
  Resources:
    GetInvokedByApiRolePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: ${self:service}-${self:provider.stage}-processRuleset
        Principal: ${cf:${self:custom.config.stackName.infrastructure}.LambdaApiRoleArn}
