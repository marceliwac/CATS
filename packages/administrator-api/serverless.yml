service: ${file(../../configuration.js):serviceNames.administratorApi}

projectDir: '../..'

custom:
  config: ${file(../../configuration.js):stage.${self:provider.stage}}
  customDomain:
    domainName: ${self:custom.config.domain.api}
    hostedZoneId: ${self:custom.config.cloudformation.hostedZoneId}
    basePath: ''
    autoDomain: true
    autoDomainWaitFor: 60
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateArn: ${cf(${self:custom.config.certificateRegion}):${self:custom.config.stackName.certificate}.Certificate}

plugins:
  - serverless-iam-roles-per-function
  - serverless-domain-manager
  - serverless-plugin-include-dependencies
  - serverless-plugin-common-excludes
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: ${self:custom.config.lambda.memorySize}
  timeout: ${self:custom.config.lambda.timeout}
  region: ${self:custom.config.region}
  stage: ${opt:stage, 'development'}
  lambdaHashingVersion: 20201221
  iam:
    role: ${cf:${self:custom.config.stackName.infrastructure}.LambdaApiRoleArn}
  apiGateway:
    restApiId: ${cf:${self:custom.config.stackName.infrastructure}.ApiRestAPIId}
    restApiRootResourceId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAdministratorResourceId}
  logRetentionInDays: 14
  environment: ${self:custom.config.lambdaEnvironment}
  tracing:
    lambda: true

functions:
  # USERS
  listAdministratorUsers:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/users.listAdministrators
    events:
      - http:
          method: GET
          path: /users/groups/administrators
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  listParticipantUsers:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/users.listParticipants
    events:
      - http:
          method: GET
          path: /users/groups/participants
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  getParticipant:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/users.getParticipant
    events:
      - http:
          method: GET
          path: /users/groups/participants/{userId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  createUser:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/users.post
    events:
      - http:
          method: POST
          path: /users
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  batchUpdateUsers:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/users.batchUpdateUsers
    events:
      - http:
          method: PATCH
          path: /users
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # STAYS
  listStays:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stays.list
    events:
      - http:
          method: GET
          path: /stays
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # STAY ASSIGNMENTS
  listStayAssignments:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stayAssignments.list
    events:
      - http:
          method: GET
          path: /stayAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  listStayAssignmentsForUser:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stayAssignments.listForUser
    events:
      - http:
          method: GET
          path: /stayAssignments/participants/{userId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  assignStaysToUser:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stayAssignments.post
    events:
      - http:
          method: POST
          path: /stayAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  unassignStaysFromUser:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/stayAssignments.delete
    events:
      - http:
          method: DELETE
          path: /stayAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}

  # GROUP ASSIGNMENTS
  listGroupAssignments:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/groupAssignments.list
    events:
      - http:
          method: GET
          path: /groupAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  getGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/groupAssignments.get
    events:
      - http:
          method: GET
          path: /groupAssignments/{groupAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  createGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/groupAssignments.post
    events:
      - http:
          method: POST
          path: /groupAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  updateGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/groupAssignments.update
    events:
      - http:
          method: PATCH
          path: /groupAssignments/{groupAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  deleteGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/groupAssignments.delete
    events:
      - http:
          method: DELETE
          path: /groupAssignments/{groupAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}


  # ORDERED GROUP ASSIGNMENTS
  listOrderedGroupAssignments:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/orderedGroupAssignments.list
    events:
      - http:
          method: GET
          path: /orderedGroupAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  getOrderedGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/orderedGroupAssignments.get
    events:
      - http:
          method: GET
          path: /orderedGroupAssignments/{orderedGroupAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  createOrderedGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/orderedGroupAssignments.post
    events:
      - http:
          method: POST
          path: /orderedGroupAssignments
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  updateOrderedGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/orderedGroupAssignments.update
    events:
      - http:
          method: PATCH
          path: /orderedGroupAssignments/{orderedGroupAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
  deleteOrderedGroupAssignment:
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    handler: handlers/orderedGroupAssignments.delete
    events:
      - http:
          method: DELETE
          path: /orderedGroupAssignments/{orderedGroupAssignmentId}
          cors:
            origin: '*'
            allowCredentials: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: ${cf:${self:custom.config.stackName.infrastructure}.ApiGatewayAuthorizerId}
