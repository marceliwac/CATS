service: ${file(../../configuration.js):serviceNames.cognitoTrigger}

projectDir: '../..'

custom:
  config: ${file(../../configuration.js):stage.${self:provider.stage}}

plugins:
  - serverless-plugin-include-dependencies
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  memorySize: ${self:custom.config.lambda.cognitoTrigger.memorySize}
  timeout: ${self:custom.config.lambda.cognitoTrigger.timeout}
  region: ${self:custom.config.region}
  stage: ${opt:stage, 'development'}
  lambdaHashingVersion: 20201221
  environment: ${self:custom.config.cognitoTriggerLambdaEnvironment}
  iam:
    role: ${cf:${self:custom.config.stackName.infrastructure}.LambdaApiRoleArn}
  logRetentionInDays: 14

functions:
  cognitoCustomMessage:
    handler: src/customMessage.handler
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    events:
      - cognitoUserPool:
          pool: ${self:custom.config.cognito.userPoolName}
          trigger: CustomMessage
          existing: true
  cognitoPostConfirmation:
    handler: src/postConfirmation.handler
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    events:
      - cognitoUserPool:
          pool: ${self:custom.config.cognito.userPoolName}
          trigger: PostConfirmation
          existing: true

  cognitoPreSignUp:
    handler: src/preSignUp.handler
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.GeneralSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet1}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet2}
        - ${cf:${self:custom.config.stackName.prerequisites}.PrivateSubnet3}
    events:
      - cognitoUserPool:
          pool: ${self:custom.config.cognito.userPoolName}
          trigger: PreSignUp
          existing: true
